/*According to I2C protocols, the data line can not change when the clock line is high, it can change only when the clock line is low. */

/*The data is transmitted in the form of packets which comprises 9 bits. The sequence of these bits are â€“
Start Condition: 1 bit
Slave Address: 8 bit
Acknowledge: 1 bit
*/

#include "LPC17xx.h" 
#define MAX30102_ADDRESS 0x57  // I2C address of MAX30102 (7-bit address)

// I2C Function Prototypes
void I2C_Init(void);
void I2C_Start(void);
void I2C_Stop(void);
void I2C_Write(unsigned char data);
unsigned char I2C_Read(unsigned char ack);

// MAX30102 Function Prototypes
void MAX30102_Init(void);
void MAX30102_WriteRegister(unsigned char reg, unsigned char data);
unsigned char MAX30102_ReadRegister(unsigned char reg);

int main(void) 
{
    I2C_Init();            // Initialize I2C
    MAX30102_Init();       // Initialize MAX30102
    while (1)
    {
    	//application code
    }
}

// I2C Initialization Routine
void I2C_Init(void) 
{
    LPC_SC->PCONP |= (1 << 7);      // Power up I2C1
    LPC_PINCON->PINSEL1 |= (1 << 22) | (1 << 24);  // Set P0.0 as SDA, P0.1 as SCL
    LPC_I2C1->I2SCLH = 0x80;        // Set clock high time (adjust for your clock)
    LPC_I2C1->I2SCLL = 0x80;        // Set clock low time (adjust for your clock)
    LPC_I2C1->I2CONSET = 0x40;      // Enable I2C interface
}

/*Start Condition: The master device sends a start condition by pulling the SDA line low while the SCL line is high. This signals that a transmission is about to begin.*/

void I2C_Start(void) 
{
    LPC_I2C1->I2CONSET = 0x20;  // Send START condition
    while (!(LPC_I2C1->I2CONSET & 0x08));  // Wait for START to be transmitted
}

/*Stop Condition: When the transmission is complete, the master sends a stop condition by releasing the SDA line to high while the SCL line is high. This signals that the communication session has ended.*/

void I2C_Stop(void) 
{
    LPC_I2C1->I2CONSET = 0x10;  // Send STOP condition
    LPC_I2C1->I2CONCLR = 0x08;  // Clear interrupt flag
}

/*Data Transmission: The master or slave (depending on the read/write operation) sends data in 8-bit chunks. After each byte, an ACK is sent to confirm that the data has been received successfully.*/

void I2C_Write(unsigned char data) 
{
    LPC_I2C1->I2DAT = data;        // Load data into I2C data register
    LPC_I2C1->I2CONCLR = 0x08;     // Clear SI flag to start transmission
    while (!(LPC_I2C1->I2CONSET & 0x08));  // Wait for transmission to complete
}

unsigned char I2C_Read(unsigned char ack) 
{
    if (ack)
    {
        LPC_I2C1->I2CONSET = 0x04;  // Send ACK
    } 
    
    else 
    {
        LPC_I2C1->I2CONCLR = 0x04;  // Send NACK
    }
    
    LPC_I2C1->I2CONCLR = 0x08;      // Clear SI flag
    while (!(LPC_I2C1->I2CONSET & 0x08));  // Wait for data to be received
    return LPC_I2C1->I2DAT;         // Return received data
}

void MAX30102_Init(void) 
{
    // Example: Set the mode configuration register
    MAX30102_WriteRegister(0x09, 0x03); // Heart rate and SpO2 mode
    // Additional configuration can be added here
}

void MAX30102_WriteRegister(unsigned char reg, unsigned char data) 
{
    I2C_Start();
    I2C_Write(MAX30102_ADDRESS << 1);  // Send address + write bit
    I2C_Write(reg);                   // Send register address
    I2C_Write(data);                  // Send data
    I2C_Stop();
}

unsigned char MAX30102_ReadRegister(unsigned char reg) 
{
    unsigned char data;
    I2C_Start();
    I2C_Write(MAX30102_ADDRESS << 1);  // Send address + write bit
    I2C_Write(reg);                   // Send register address
    I2C_Start();                      // Send repeated start
    I2C_Write((MAX30102_ADDRESS << 1) | 1); // Send address + read bit
    data = I2C_Read(0);               // Read data (send NACK)
    I2C_Stop();
    return data;
}
