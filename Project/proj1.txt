To calculate the **Heart Rate** and **SpO2** from the raw data provided by the **MAX30102** sensor, you need to perform signal processing steps such as **DC removal**, **peak detection**, and **ratio computation**. Here's how we can approach the signal processing and display the actual **Heart Rate** (HR) and **SpO2** values on the **LCD**.

### Basic Signal Processing Steps:

1. **Filtering the Raw Data**:  
   The raw data from the **MAX30102** sensor typically contains **noise**. This noise can be removed using a **low-pass filter** to isolate the **AC component** (heart rate and SpO2 signal).

2. **Peak Detection**:  
   After filtering, you can detect the **peaks** in the **IR** and **Red** channels. The time between successive peaks gives you the **Heart Rate**.

3. **SpO2 Calculation**:  
   The ratio of the **Red** and **IR** signals at their peaks can be used to calculate the **SpO2** level. This requires applying a formula that uses the ratio of the Red-to-IR signals.

### Key Concepts for Signal Processing:
- **Heart Rate (HR)** is typically calculated from the frequency of the **pulsatile signal** in the IR and/or Red channels.
- **SpO2** is estimated from the **ratio of AC components** of the Red and IR signals. A common empirical formula is:
  
  \[
  \text{SpO2} = 100 - 5 \times \left( \frac{AC_{\text{Red}}}{AC_{\text{IR}}} \right)
  \]

Where:
- \(AC_{\text{Red}}\) is the AC component (pulsatile signal) from the Red channel.
- \(AC_{\text{IR}}\) is the AC component (pulsatile signal) from the IR channel.

### Updated Code to Implement Signal Processing and Display on LCD:

The code below extends the previous example to include **Heart Rate (HR)** and **SpO2** calculation using basic signal processing methods.

```c
#include "LPC17xx.h"
#include "stdio.h"
#include "string.h"

// I2C communication settings for MAX30102 and LCD
#define MAX30102_ADDR        0x57  // MAX30102 I2C address (7-bit address)

#define I2C0_SCL_PIN         28    // LPC1768 P0.28 -> SCL
#define I2C0_SDA_PIN         27    // LPC1768 P0.27 -> SDA

// MAX30102 Registers
#define MAX30102_REG_MODE_CONFIG     0x06
#define MAX30102_REG_FIFO_DATA       0x07
#define MAX30102_REG_SPO2_CONFIG     0x09
#define MAX30102_REG_LED_CONFIG      0x0A
#define MAX30102_REG_FIFO_CONTROL    0x08

// LCD I2C Addresses and Commands
#define LCD_ADDR                0x3F  // Common I2C address for LCD with backpack (can be 0x27 or 0x3F)

// I2C Initialization for MAX30102 and LCD
void I2C_Init(void) {
    LPC_SC->PCONP |= (1 << 7);       // Enable power to I2C0
    LPC_PINCON->PINSEL1 |= (1 << 18) | (1 << 20);  // Set SDA and SCL to I2C0 functions

    LPC_I2C0->I2SCLH = 0x2;    // Set high period for SCL clock (Standard 100kHz)
    LPC_I2C0->I2SCLL = 0x2;    // Set low period for SCL clock (Standard 100kHz)

    LPC_I2C0->I2CONCLR = 0x6C; // Clear control flags
    LPC_I2C0->I2CONSET = 0x40; // Enable I2C (I2C0)
}

// I2C Write function
void I2C_Write(uint8_t slave_addr, uint8_t reg, uint8_t data) {
    LPC_I2C0->I2CONCLR = 0x6C;   // Clear control flags
    LPC_I2C0->I2DAT = reg;       // Send register address
    LPC_I2C0->I2CONSET = 0x04;   // Set start flag to initiate communication

    while (!(LPC_I2C0->I2CONSET & (1 << 3))); // Wait for transmission to complete

    LPC_I2C0->I2DAT = data;      // Send data
    LPC_I2C0->I2CONCLR = 0x28;   // Clear the start flag

    while (!(LPC_I2C0->I2CONSET & (1 << 3))); // Wait for transmission to complete
}

// I2C Read function
uint8_t I2C_Read(uint8_t slave_addr, uint8_t reg) {
    uint8_t data;

    // Write register address
    LPC_I2C0->I2CONCLR = 0x6C;     // Clear control flags
    LPC_I2C0->I2DAT = reg;         // Send register address
    LPC_I2C0->I2CONSET = 0x04;     // Set start flag

    while (!(LPC_I2C0->I2CONSET & (1 << 3))); // Wait for completion

    // Read data
    LPC_I2C0->I2CONCLR = 0x28;     // Clear the start flag
    LPC_I2C0->I2CONSET = 0x10;     // Set repeated start flag

    LPC_I2C0->I2DAT = 0x01;        // Set read mode
    while (!(LPC_I2C0->I2CONSET & (1 << 3))); // Wait for completion

    data = LPC_I2C0->I2DAT;        // Read data

    return data;
}

// Function to write to MAX30102 register
void MAX30102_Write(uint8_t reg, uint8_t value) {
    I2C_Write(MAX30102_ADDR, reg, value);
}

// Function to read from MAX30102 register
uint8_t MAX30102_Read(uint8_t reg) {
    return I2C_Read(MAX30102_ADDR, reg);
}

// Initialize MAX30102
void MAX30102_Init(void) {
    // Configure the MAX30102 to Heart Rate Mode
    MAX30102_Write(MAX30102_REG_MODE_CONFIG, 0x03);  // Set HR mode (continuous)
    
    // Configure SpO2 and HR settings (default settings)
    MAX30102_Write(MAX30102_REG_SPO2_CONFIG, 0x27);  // Sample rate 100 Hz, LED Pulse Width 411 us
    MAX30102_Write(MAX30102_REG_LED_CONFIG, 0x1F);   // LED Current: Default setting
    
    // FIFO control (default settings)
    MAX30102_Write(MAX30102_REG_FIFO_CONTROL, 0x40);  // Set FIFO to continuous mode
}

// Function to read FIFO data (Heart rate or SpO2 data)
uint8_t MAX30102_ReadFIFO(void) {
    return MAX30102_Read(MAX30102_REG_FIFO_DATA);  // Read FIFO data register
}

// LCD initialization for 16x2 I2C display
void LCD_Init(void) {
    // Set the LCD to 4-bit mode
    I2C_Write(LCD_ADDR, 0x00, 0x30);  // Function set (4-bit mode)
    I2C_Write(LCD_ADDR, 0x00, 0x30);  // Function set (4-bit mode again)
    I2C_Write(LCD_ADDR, 0x00, 0x30);  // Function set (4-bit mode final)
    I2C_Write(LCD_ADDR, 0x00, 0x20);  // 4-bit mode, 2-line display, 5x8 font
    
    I2C_Write(LCD_ADDR, 0x00, 0x0C);  // Display ON, Cursor OFF
    I2C_Write(LCD_ADDR, 0x00, 0x01);  // Clear display
    I2C_Write(LCD_ADDR, 0x00, 0x06);  // Entry mode (increment cursor)
}

// LCD Write function (send data or command)
void LCD_Write(uint8_t value, uint8_t mode) {
    I2C_Write(LCD_ADDR, mode, value);
}

// LCD Print a string function
void LCD_Print(char* str) {
    while (*str) {
        LCD_Write(*str++, 0x01);  // Data mode (0x01 for data)
    }
}

// Signal processing variables
#define SAMPLE_SIZE 100  // Number of samples to accumulate for signal processing
uint8_t red_samples[SAMPLE_SIZE];
uint8_t ir_samples[SAMPLE_SIZE];
uint8_t sample_index = 0;
uint8_t heart_rate = 0;
uint8_t spo2 = 0;

// Function to accumulate samples for signal processing
void accumulate_samples(uint8_t red_data, uint8_t ir_data) {
    red_samples[sample_index] = red_data;
    ir_samples[sample_index] = ir_data;
    
    sample_index++;
    if (sample_index >= SAMPLE_SIZE) {
        sample_index = 0;
    }
}

// Function to compute

 Heart Rate (in BPM)
uint8_t compute_heart_rate() {
    // Simple example of peak detection for HR (e.g., counting peaks)
    // This needs advanced signal processing in practice, but this is a basic example
    uint8_t peak_count = 0;
    for (uint8_t i = 1; i < SAMPLE_SIZE - 1; i++) {
        if (red_samples[i-1] < red_samples[i] && red_samples[i+1] < red_samples[i]) {
            peak_count++;
        }
    }
    // Convert peak count to heart rate (example: peak_count in 60 seconds)
    heart_rate = peak_count * 60 / SAMPLE_SIZE;
    return heart_rate;
}

// Function to compute SpO2 (simplified version)
uint8_t compute_spo2() {
    uint8_t red_ac = 0, ir_ac = 0;
    
    // Calculate AC component (simple method)
    for (uint8_t i = 0; i < SAMPLE_SIZE; i++) {
        red_ac += red_samples[i];
        ir_ac += ir_samples[i];
    }
    
    // Compute ratio (simplified)
    if (ir_ac != 0) {
        spo2 = 100 - (red_ac * 100 / ir_ac);
    } else {
        spo2 = 0;
    }
    return spo2;
}

int main(void) {
    uint8_t red_data, ir_data;
    char buffer[20];  // Buffer to hold the string to display on LCD

    SystemInit();      // Initialize system
    I2C_Init();        // Initialize I2C bus
    MAX30102_Init();   // Initialize MAX30102 sensor
    LCD_Init();        // Initialize the LCD
    
    LCD_Print("Initializing...");  // Display message on LCD
    // Wait for a short time to let LCD clear and show message
    for (volatile int i = 0; i < 1000000; i++);

    while (1) {
        // Read FIFO data
        red_data = MAX30102_ReadFIFO();
        ir_data = MAX30102_ReadFIFO();
        
        // Accumulate samples for signal processing
        accumulate_samples(red_data, ir_data);
        
        // Compute heart rate and SpO2 values
        heart_rate = compute_heart_rate();
        spo2 = compute_spo2();
        
        // Clear LCD and display the results
        I2C_Write(LCD_ADDR, 0x00, 0x01);  // Clear display
        sprintf(buffer, "HR: %d bpm", heart_rate);
        LCD_Print(buffer);  // Display Heart Rate
        I2C_Write(LCD_ADDR, 0x00, 0xC0);  // Move cursor to second line
        sprintf(buffer, "SpO2: %d%%", spo2);
        LCD_Print(buffer);  // Display SpO2
        
        // Add a delay before next reading
        for (volatile int i = 0; i < 1000000; i++); // Simple delay
    }
}
```

### Explanation:

1. **Signal Accumulation**:  
   - We store the sensor's **Red** and **IR** samples in arrays (`red_samples` and `ir_samples`) and accumulate samples over time. When the number of samples reaches `SAMPLE_SIZE`, we process the data to compute **Heart Rate** and **SpO2**.

2. **Heart Rate Calculation**:  
   - This example uses a basic peak detection method where we count the peaks in the **Red** channel (which corresponds to the pulsatile signal). A more advanced peak detection algorithm (e.g., FFT or filtering) could improve accuracy, but this is a basic example.

3. **SpO2 Calculation**:  
   - The **SpO2** calculation uses the ratio of the **AC component** of the **Red** signal to the **IR** signal. This ratio is approximated to estimate the **SpO2** value using a simple formula.

4. **Displaying the Results**:  
   - Both the **Heart Rate** (bpm) and **SpO2** (percentage) are displayed on the LCD screen.

### Important Notes:

1. **Signal Processing**:  
   The signal processing in this example is **simplified** for demonstration purposes. In a real-world scenario, more sophisticated techniques like filtering, **FFT**, **DC removal**, or advanced peak detection would be necessary for accurate readings.

2. **Sampling Rate**:  
   This code assumes the MAX30102 provides data at a specific rate (typically around 100Hz). Depending on the exact timing, you might need to adjust the signal processing logic for better accuracy.

3. **Calibration**:  
   The MAX30102 sensor may require calibration to accurately estimate **SpO2** and **Heart Rate**.