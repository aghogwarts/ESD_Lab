To display the output on an **LCD** instead of using the serial console, you will need to integrate an **LCD display** (e.g., a 16x2 LCD with I2C interface or parallel interface) with your **LPC1768** microcontroller. I'll assume you're using a **16x2 I2C LCD**, which is quite common for embedded projects. 

The following code integrates the **MAX30102** sensor with an **LCD screen** to display the output, such as raw sensor data, on the LCD.

### Components Needed:

1. **LPC1768 Microcontroller**
2. **MAX30102 Sensor** (via I2C)
3. **16x2 I2C LCD**
4. **Wires for connections**

### LCD Pin Connections (Assuming I2C LCD):

- **VCC** of LCD -> 3.3V on LPC1768
- **GND** of LCD -> GND on LPC1768
- **SDA** of LCD -> P0.27 (SDA) on LPC1768
- **SCL** of LCD -> P0.28 (SCL) on LPC1768

### Updated Code to Display on LCD:

The code below initializes both the **MAX30102** sensor and the **16x2 I2C LCD**. It reads the sensor data and displays the raw **FIFO data** on the LCD.

```c
#include "LPC17xx.h"
#include "stdio.h"
#include "string.h"

// I2C communication settings for MAX30102 and LCD
#define MAX30102_ADDR        0x57  // MAX30102 I2C address (7-bit address)

#define I2C0_SCL_PIN         28    // LPC1768 P0.28 -> SCL
#define I2C0_SDA_PIN         27    // LPC1768 P0.27 -> SDA

// MAX30102 Registers
#define MAX30102_REG_MODE_CONFIG     0x06
#define MAX30102_REG_FIFO_DATA       0x07
#define MAX30102_REG_SPO2_CONFIG     0x09
#define MAX30102_REG_LED_CONFIG      0x0A
#define MAX30102_REG_FIFO_CONTROL    0x08

// LCD I2C Addresses and Commands
#define LCD_ADDR                0x3F  // Common I2C address for LCD with backpack (can be 0x27 or 0x3F)

// I2C Initialization for MAX30102 and LCD
void I2C_Init(void) {
    LPC_SC->PCONP |= (1 << 7);       // Enable power to I2C0
    LPC_PINCON->PINSEL1 |= (1 << 18) | (1 << 20);  // Set SDA and SCL to I2C0 functions

    LPC_I2C0->I2SCLH = 0x2;    // Set high period for SCL clock (Standard 100kHz)
    LPC_I2C0->I2SCLL = 0x2;    // Set low period for SCL clock (Standard 100kHz)

    LPC_I2C0->I2CONCLR = 0x6C; // Clear control flags
    LPC_I2C0->I2CONSET = 0x40; // Enable I2C (I2C0)
}

// I2C Write function
void I2C_Write(uint8_t slave_addr, uint8_t reg, uint8_t data) {
    LPC_I2C0->I2CONCLR = 0x6C;   // Clear control flags
    LPC_I2C0->I2DAT = reg;       // Send register address
    LPC_I2C0->I2CONSET = 0x04;   // Set start flag to initiate communication

    while (!(LPC_I2C0->I2CONSET & (1 << 3))); // Wait for transmission to complete

    LPC_I2C0->I2DAT = data;      // Send data
    LPC_I2C0->I2CONCLR = 0x28;   // Clear the start flag

    while (!(LPC_I2C0->I2CONSET & (1 << 3))); // Wait for transmission to complete
}

// I2C Read function
uint8_t I2C_Read(uint8_t slave_addr, uint8_t reg) {
    uint8_t data;

    // Write register address
    LPC_I2C0->I2CONCLR = 0x6C;     // Clear control flags
    LPC_I2C0->I2DAT = reg;         // Send register address
    LPC_I2C0->I2CONSET = 0x04;     // Set start flag

    while (!(LPC_I2C0->I2CONSET & (1 << 3))); // Wait for completion

    // Read data
    LPC_I2C0->I2CONCLR = 0x28;     // Clear the start flag
    LPC_I2C0->I2CONSET = 0x10;     // Set repeated start flag

    LPC_I2C0->I2DAT = 0x01;        // Set read mode
    while (!(LPC_I2C0->I2CONSET & (1 << 3))); // Wait for completion

    data = LPC_I2C0->I2DAT;        // Read data

    return data;
}

// Function to write to MAX30102 register
void MAX30102_Write(uint8_t reg, uint8_t value) {
    I2C_Write(MAX30102_ADDR, reg, value);
}

// Function to read from MAX30102 register
uint8_t MAX30102_Read(uint8_t reg) {
    return I2C_Read(MAX30102_ADDR, reg);
}

// Initialize MAX30102
void MAX30102_Init(void) {
    // Configure the MAX30102 to Heart Rate Mode
    MAX30102_Write(MAX30102_REG_MODE_CONFIG, 0x03);  // Set HR mode (continuous)
    
    // Configure SpO2 and HR settings (default settings)
    MAX30102_Write(MAX30102_REG_SPO2_CONFIG, 0x27);  // Sample rate 100 Hz, LED Pulse Width 411 us
    MAX30102_Write(MAX30102_REG_LED_CONFIG, 0x1F);   // LED Current: Default setting
    
    // FIFO control (default settings)
    MAX30102_Write(MAX30102_REG_FIFO_CONTROL, 0x40);  // Set FIFO to continuous mode
}

// Function to read FIFO data (Heart rate or SpO2 data)
uint8_t MAX30102_ReadFIFO(void) {
    return MAX30102_Read(MAX30102_REG_FIFO_DATA);  // Read FIFO data register
}

// LCD initialization for 16x2 I2C display
void LCD_Init(void) {
    // Set the LCD to 4-bit mode
    I2C_Write(LCD_ADDR, 0x00, 0x30);  // Function set (4-bit mode)
    I2C_Write(LCD_ADDR, 0x00, 0x30);  // Function set (4-bit mode again)
    I2C_Write(LCD_ADDR, 0x00, 0x30);  // Function set (4-bit mode final)
    I2C_Write(LCD_ADDR, 0x00, 0x20);  // 4-bit mode, 2-line display, 5x8 font
    
    I2C_Write(LCD_ADDR, 0x00, 0x0C);  // Display ON, Cursor OFF
    I2C_Write(LCD_ADDR, 0x00, 0x01);  // Clear display
    I2C_Write(LCD_ADDR, 0x00, 0x06);  // Entry mode (increment cursor)
}

// LCD Write function (send data or command)
void LCD_Write(uint8_t value, uint8_t mode) {
    I2C_Write(LCD_ADDR, mode, value);
}

// LCD Print a string function
void LCD_Print(char* str) {
    while (*str) {
        LCD_Write(*str++, 0x01);  // Data mode (0x01 for data)
    }
}

int main(void) {
    uint8_t data;
    char buffer[20];  // Buffer to hold the string to display on LCD

    SystemInit();      // Initialize system
    I2C_Init();        // Initialize I2C bus
    MAX30102_Init();   // Initialize MAX30102 sensor
    LCD_Init();        // Initialize the LCD
    
    LCD_Print("Initializing...");  // Display message on LCD
    // Wait for a short time to let LCD clear and show message
    for (volatile int i = 0; i < 1000000; i++);

    while (1) {
        // Read FIFO data
        data = MAX30102_ReadFIFO();
        
        // Clear LCD and print the new data
        I2C_Write(LCD_ADDR, 0x00, 0x01);  // Clear display
        sprintf(buffer, "FIFO: 0x%02X", data);
        LCD_Print(buffer);  // Print the data on LCD
        
        // Add a delay before next reading
        for (volatile int i = 0; i < 1000000; i++); // Simple delay
    }
}
```

### Explanation of Key Changes:

1. **LCD Initialization (`LCD_Init`)**:
   - The `LCD_Init()` function initializes the LCD in **4-bit mode**, which is typical for I2C-based

 16x2 displays. It sets the display size, cursor settings, and clears the screen.
   
2. **LCD Write Functions (`LCD_Write`, `LCD_Print`)**:
   - `LCD_Write()` sends either data or a command to the LCD, depending on the mode (0 for command, 1 for data).
   - `LCD_Print()` takes a string and sends each character to the LCD, printing it on the screen.

3. **Main Loop**:
   - The `MAX30102_ReadFIFO()` function reads a byte of data from the FIFO buffer.
   - The `sprintf()` function formats the raw data into a string (`"FIFO: 0xXX"`), which is then displayed on the LCD using `LCD_Print()`.

4. **Simple Delay**:
   - A basic delay (`for (volatile int i = 0; i < 1000000; i++);`) is used to slow down the read and display process so that you can observe the output on the LCD.

### How to Use:

1. **Wiring**:  
   - Connect the **SDA** and **SCL** pins of the LPC1768 to the **SDA** and **SCL** pins of the LCD.
   - Ensure the **VCC** and **GND** pins are connected correctly to power the LCD and the LPC1768.

2. **Upload and Run**:  
   - Upload the program to the **LPC1768**.
   - The **16x2 I2C LCD** will display the raw FIFO data from the **MAX30102** sensor.
   - The output on the LCD will show the sensor data like this:
     ```
     FIFO: 0x1F
     FIFO: 0x3B
     FIFO: 0x9A
     ```
   
You can further enhance this code by implementing signal processing to display actual **heart rate** and **SpO2** values instead of just raw FIFO data.