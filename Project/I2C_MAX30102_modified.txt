#include "LPC17xx.h"  // Header file for LPC1768
#include <stdio.h>

#define MAX30102_ADDRESS 0x57  // I2C address of MAX30102 (7-bit address)
#define ADC_CHANNEL 1          // ADC channel for LM35 (assuming it is connected to P0.24)

// Function Prototypes
void I2C_Init(void);
void I2C_Start(void);
void I2C_Stop(void);
void I2C_Write(uint8_t data);
uint8_t I2C_Read(uint8_t ack);
void ADC_Init(void);
uint16_t ADC_Read(void);
void MAX30102_Init(void);
void MAX30102_WriteRegister(uint8_t reg, uint8_t data);
uint8_t MAX30102_ReadRegister(uint8_t reg);
void Process_Sensor_Data(void);

int main(void) {
    I2C_Init();        // Initialize I2C for MAX30102
    ADC_Init();        // Initialize ADC for LM35
    MAX30102_Init();   // Initialize MAX30102
    
    while (1) {
        Process_Sensor_Data();  // Read and print data from both sensors
    }
}

// I2C Initialization for MAX30102
void I2C_Init(void) {
    LPC_SC->PCONP |= (1 << 7);   // Power up I2C1
    LPC_PINCON->PINSEL1 |= (1 << 22) | (1 << 24);  // Set P0.0 as SDA, P0.1 as SCL
    LPC_I2C1->I2SCLH = 0x80;     // Set clock high time (adjust for your clock)
    LPC_I2C1->I2SCLL = 0x80;     // Set clock low time (adjust for your clock)
    LPC_I2C1->I2CONSET = 0x40;   // Enable I2C interface
}

void I2C_Start(void) {
    LPC_I2C1->I2CONSET = 0x20;   // Send START condition
    while (!(LPC_I2C1->I2CONSET & 0x08));  // Wait for START to be transmitted
}

void I2C_Stop(void) {
    LPC_I2C1->I2CONSET = 0x10;   // Send STOP condition
    LPC_I2C1->I2CONCLR = 0x08;   // Clear interrupt flag
}

void I2C_Write(uint8_t data) {
    LPC_I2C1->I2DAT = data;      // Load data into I2C data register
    LPC_I2C1->I2CONCLR = 0x08;   // Clear SI flag to start transmission
    while (!(LPC_I2C1->I2CONSET & 0x08));  // Wait for transmission to complete
}

uint8_t I2C_Read(uint8_t ack) {
    if (ack) {
        LPC_I2C1->I2CONSET = 0x04;  // Send ACK
    } else {
        LPC_I2C1->I2CONCLR = 0x04;  // Send NACK
    }
    LPC_I2C1->I2CONCLR = 0x08;      // Clear SI flag
    while (!(LPC_I2C1->I2CONSET & 0x08));  // Wait for data to be received
    return LPC_I2C1->I2DAT;         // Return received data
}

void MAX30102_Init(void) {
    // Example configuration: Set mode for Heart Rate and SpO2
    MAX30102_WriteRegister(0x09, 0x03);  // Set to SpO2 mode
    MAX30102_WriteRegister(0x0A, 0x1F);  // Set LED Pulse Amplitude
}

void MAX30102_WriteRegister(uint8_t reg, uint8_t data) {
    I2C_Start();
    I2C_Write(MAX30102_ADDRESS << 1);  // Send address + write bit
    I2C_Write(reg);                   // Send register address
    I2C_Write(data);                  // Send data
    I2C_Stop();
}

uint8_t MAX30102_ReadRegister(uint8_t reg) {
    uint8_t data;
    I2C_Start();
    I2C_Write(MAX30102_ADDRESS << 1);  // Send address + write bit
    I2C_Write(reg);                   // Send register address
    I2C_Start();                      // Send repeated start
    I2C_Write((MAX30102_ADDRESS << 1) | 1); // Send address + read bit
    data = I2C_Read(0);               // Read data (send NACK)
    I2C_Stop();
    return data;
}

// ADC Initialization for LM35
void ADC_Init(void) {
    LPC_SC->PCONP |= (1 << 12);   // Power up ADC
    LPC_PINCON->PINSEL1 |= (1 << 14);  // Set P0.24 as AD0.1
    LPC_ADC->ADCR = (1 << 1) |    // Select channel 1 (AD0.1)
                    (4 << 8) |    // ADC clock
                    (1 << 21);    // Enable ADC
}

uint16_t ADC_Read(void) {
    LPC_ADC->ADCR |= (1 << 24);   // Start conversion
    while (!(LPC_ADC->ADGDR & (1 << 31)));  // Wait for conversion to finish
    return (LPC_ADC->ADGDR >> 4) & 0xFFF;   // Return result
}

void Process_Sensor_Data(void) {
    // Read and process LM35 data
    uint16_t adc_value = ADC_Read();
    float temperature = (adc_value * 3.3 / 4096) * 100; // Assuming 3.3V reference
    
    // Read example register from MAX30102 (e.g., part ID)
    uint8_t part_id = MAX30102_ReadRegister(0xFF);  // Replace with actual data you want to read
    
    // Print the data
    printf("LM35 Temperature: %.2fÂ°C\n", temperature);
    printf("MAX30102 Part ID: %d\n", part_id);
}
