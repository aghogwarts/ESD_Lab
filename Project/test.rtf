{\rtf1\ansi\ansicpg1252\cocoartf2761
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 #include "LPC17xx.h"  // Include LPC1768 specific header\
\
// Define MAX30102 I2C Address\
#define MAX30102_ADDR 0xAE  // I2C address for MAX30102 (can also be 0xAF depending on address pin)\
\
// Define the I2C pins for LPC1768 (SDA = P0.27, SCL = P0.28)\
#define SDA_PIN 27\
#define SCL_PIN 28\
\
// I2C Data and Control Registers for MAX30102\
#define MAX30102_REG_MODE_CONFIG 0x06\
#define MAX30102_REG_FIFO_WRITE  0x08\
#define MAX30102_REG_FIFO_READ   0x09\
#define MAX30102_REG_INTR_STATUS 0x00\
\
// Function to initialize I2C\
void I2C_Init(void) \{\
    LPC_SC->PCONP |= (1 << 19);  // Power on I2C0\
    LPC_PINCON->PINSEL1 |= (1 << 22) | (1 << 24);  // Set P0.27 (SDA) and P0.28 (SCL) as I2C pins\
\
    // Set I2C clock frequency (Standard Mode: 100kHz)\
    LPC_I2C0->I2SCLH = 0xA0;  // High period of I2C clock\
    LPC_I2C0->I2SCLL = 0xA0;  // Low period of I2C clock\
\
    LPC_I2C0->I2CONSET = (1 << 6);  // Enable I2C0 controller\
\}\
\
// Function to write data to MAX30102 register\
void I2C_Write(uint8_t reg, uint8_t value) \{\
    LPC_I2C0->I2DAT = reg;          // Set register address\
    LPC_I2C0->I2CONCLR = (1 << 3);  // Clear I2C interrupt flag\
    LPC_I2C0->I2CONSET = (1 << 5);  // Start transmission\
\
    while (!(LPC_I2C0->I2STAT & 0x08));  // Wait for completion\
\
    LPC_I2C0->I2DAT = value;       // Set data to write\
    LPC_I2C0->I2CONCLR = (1 << 3); // Clear interrupt flag\
\
    LPC_I2C0->I2CONSET = (1 << 5); // Start transmission again\
    while (!(LPC_I2C0->I2STAT & 0x08));  // Wait for completion\
    LPC_I2C0->I2CONCLR = (1 << 4) | (1 << 5); // Stop transmission\
\}\
\
// Function to read data from MAX30102 register\
uint8_t I2C_Read(uint8_t reg) \{\
    uint8_t read_value;\
\
    LPC_I2C0->I2DAT = reg;          // Set register address\
    LPC_I2C0->I2CONCLR = (1 << 3);  // Clear interrupt flag\
    LPC_I2C0->I2CONSET = (1 << 5);  // Start transmission\
\
    while (!(LPC_I2C0->I2STAT & 0x08));  // Wait for completion\
\
    LPC_I2C0->I2CONSET = (1 << 4);  // Generate a STOP condition\
    LPC_I2C0->I2CONCLR = (1 << 3);  // Clear interrupt flag\
\
    // Read the data from the register\
    LPC_I2C0->I2CONSET = (1 << 5); // Start the read operation\
\
    while (!(LPC_I2C0->I2STAT & 0x08));  // Wait for completion\
    read_value = LPC_I2C0->I2DAT;  // Read the value\
\
    return read_value;\
\}\
\
// Function to initialize MAX30102 sensor\
void MAX30102_Init(void) \{\
    // Reset MAX30102\
    I2C_Write(MAX30102_REG_MODE_CONFIG, 0x40);  // Reset the sensor\
\
    // Wait for reset to complete (add a small delay if necessary)\
    for (int i = 0; i < 10000; i++);\
\
    // Configure LED current and other settings (example: LED current setup)\
    I2C_Write(0x09, 0x3F);  // LED current register (example value)\
    I2C_Write(0x0A, 0x24);  // Sample rate setup (example value)\
\
    // Set the mode for continuous measurement (Heart Rate + SpO2 mode)\
    I2C_Write(0x02, 0x03);  // Mode configuration register\
\}\
\
// Function to read sensor data (FIFO) from MAX30102\
void MAX30102_ReadData(void) \{\
    uint8_t fifo_data[6];  // Array to store FIFO data (6 bytes of data)\
\
    // Read FIFO data (example: first 6 bytes from the FIFO)\
    for (int i = 0; i < 6; i++) \{\
        fifo_data[i] = I2C_Read(MAX30102_REG_FIFO_READ);  // Read each byte from FIFO\
    \}\
\
    // Process FIFO data for heart rate and SpO2 here (this will involve algorithms)\
    // You can print the values or process them for analysis\
\}\
\
int main(void) \{\
    // Initialize I2C\
    I2C_Init();\
\
    // Initialize MAX30102 sensor\
    MAX30102_Init();\
\
    while (1) \{\
        // Read data from MAX30102 sensor\
        MAX30102_ReadData();\
\
        // Add a delay or sleep\
        for (int i = 0; i < 1000000; i++);  // Simple delay\
    \}\
\
    return 0;\
\}\
}